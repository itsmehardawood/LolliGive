'use client';

import { useEffect, useState, Suspense } from 'react';
import { useSearchParams } from 'next/navigation';

function PaymentSuccessContent() {
  const searchParams = useSearchParams();
  const [status, setStatus] = useState('processing');
  const [message, setMessage] = useState('Processing your payment...');

  useEffect(() => {
    const createTransaction = async () => {
      try {
        const isDemoMode = searchParams.get('demo') === 'true';

        if (isDemoMode) {
          setTimeout(() => {
            setStatus('success');
            setMessage('‚úÖ Demo transaction completed successfully! No real payment was processed.');
          }, 1500);
          return;
        }

        const paymentData = {
          amount: searchParams.get('amount'),
          name: searchParams.get('name'),
          purpose: searchParams.get('purpose'),
          comment: searchParams.get('comment'),
          orgId: searchParams.get('orgId'),
        };

        if (!paymentData.amount || !paymentData.name || !paymentData.orgId) {
          throw new Error('Missing payment information');
        }

        const response = await fetch('https://api.lolligive.com/api/transaction/create', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({
            org_key_id: paymentData.orgId,
            amount: parseFloat(paymentData.amount),
            name: paymentData.name,
            payment_method: 'Elavon Debit Card',
            purpose_reason: paymentData.purpose,
            comment: paymentData.comment || '',
          }),
        });

        if (response.ok) {
          const transactionData = await response.json();
          setStatus('success');
          setMessage(
            `‚úÖ Thank you! Your donation has been processed successfully. Transaction ID: ${
              transactionData.id || 'Generated by system'
            }`
          );
        } else {
          throw new Error('Failed to record transaction');
        }
      } catch (error) {
        console.error('Error creating transaction:', error);
        setStatus('error');
        setMessage(
          '‚ö†Ô∏è Payment was processed, but there was an issue recording the transaction. Please contact support with your payment details.'
        );
      }
    };

    if (searchParams.get('amount') && searchParams.get('name') && searchParams.get('orgId')) {
      createTransaction();
    } else {
      setStatus('error');
      setMessage('‚ùå Invalid payment data. Please contact support if you completed a payment.');
    }
  }, [searchParams]);

  return (
    <div className="min-h-screen bg-black flex items-center justify-center px-4">
      <div className="max-w-md w-full bg-white rounded-lg shadow-xl p-8 text-center">
        <div className="mb-6">
          {status === 'processing' && (
            <div className="animate-spin rounded-full h-16 w-16 border-b-2 border-blue-600 mx-auto"></div>
          )}
          {status === 'success' && <div className="text-green-600 text-6xl mb-4">‚úÖ</div>}
          {status === 'error' && <div className="text-red-600 text-6xl mb-4">‚ö†Ô∏è</div>}
        </div>

        <h1 className="text-2xl font-bold text-gray-900 mb-4">
          {status === 'processing' && 'Processing Payment...'}
          {status === 'success' && 'Payment Successful!'}
          {status === 'error' && 'Payment Issue'}
        </h1>

        <p className="text-gray-600 mb-6">{message}</p>

        {searchParams.get('demo') === 'true' && (
          <div className="mb-6 bg-yellow-100 border border-yellow-400 text-yellow-800 px-4 py-3 rounded">
            <div className="flex items-center">
              <span className="text-lg mr-2">üß™</span>
              <span className="font-semibold">Demo Mode - No Real Transaction</span>
            </div>
          </div>
        )}

        {status === 'success' && searchParams.get('amount') && (
          <div className="bg-gray-50 rounded-lg p-4 mb-6 text-left">
            <h3 className="font-semibold text-gray-900 mb-2">Payment Details:</h3>
            <div className="text-sm text-gray-600 space-y-1">
              <div>Amount: ${searchParams.get('amount')}</div>
              <div>Name: {searchParams.get('name')}</div>
              <div>Purpose: {searchParams.get('purpose')}</div>
              {searchParams.get('comment') && <div>Note: {searchParams.get('comment')}</div>}
            </div>
          </div>
        )}

        <button
          onClick={() => (window.location.href = '/')}
          className="w-full bg-blue-600 text-white py-3 px-6 rounded-lg font-semibold hover:bg-blue-700 transition"
        >
          Return to Home
        </button>
      </div>
    </div>
  );
}

// ‚úÖ Wrap the entire content in Suspense ‚Äî this ensures build safety
export default function PaymentSuccessPage() {
  return (
    <Suspense fallback={<div>Loading payment details...</div>}>
      <PaymentSuccessContent />
    </Suspense>
  );
}
